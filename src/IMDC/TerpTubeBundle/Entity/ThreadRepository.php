<?php

namespace IMDC\TerpTubeBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ThreadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ThreadRepository extends EntityRepository
{
    public function getMostRecentThreads($limit=30)
    {
        $query = $this->getEntityManager()
                      ->createQuery
                      ('SELECT t
                        FROM IMDCTerpTubeBundle:Thread t
                        JOIN IMDCTerpTubeBundle:Permissions p
                        WHERE p.accessLevel = (-1)
                        ORDER BY t.creationDate DESC
                       ');
        $query->setMaxResults($limit);
         
        return $query->getResult();
    }
    
    public function findRecentThreadsForForum($fid, $limit=4)
    {
        return $this->getEntityManager()
        		->createQuery('
        				SELECT t
        				FROM IMDCTerpTubeBundle:Thread t
        				WHERE t.parentForum = :fid
        				ORDER BY t.creationDate DESC')
        		->setParameter('fid', $fid)
        		->setMaxResults($limit)
        		->getResult();
    }
    
    /**
     * Iterates through all threads and returns an array of Thread objects
     * that the given user can access based on the thread permissions and 
     * the 'userHasAccess' method for a Thread object.
     * 
     * @param IMDCTerpTubeBundle:User $user
     * @return multitype:Ambigous <multitype:, \Doctrine\ORM\mixed, \Doctrine\ORM\Internal\Hydration\mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
     */
    public function findThreadsUserHasAccessTo($user)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT t FROM IMDCTerpTubeBundle:Thread t
        ');
        $allThreads = $query->getResult();
        $results = array();
        foreach ($allThreads as $athread) {
        	if ($athread->userHasAccess($user)) {
        	    $results[] = $athread;
        	}
        }

        return $results;
    }
}
