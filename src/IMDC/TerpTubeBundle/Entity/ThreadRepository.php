<?php

namespace IMDC\TerpTubeBundle\Entity;

use Doctrine\ORM\EntityRepository;
use IMDC\TerpTubeBundle\Utils\Utils;
use Symfony\Component\Security\Core\SecurityContext;

/**
 * ThreadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ThreadRepository extends EntityRepository
{
    /**
     * @param $parentForumId
     * @param array $sortParams
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getViewableToUserQB($parentForumId, $sortParams = array())
    {
        $qb = $this->createQueryBuilder('t')
            ->leftJoin('t.parentForum', 'f')
            ->where('f.id = :parentForumId')
            ->setParameters(array(
                'parentForumId' => $parentForumId));

        return Utils::applySortParams($qb, $sortParams);
    }

    public function getViewableToUser($parentForumId, SecurityContext $securityContext, $sortParams = array())
    {
        $threads = $this->getViewableToUserQB($parentForumId, $sortParams)
            ->getQuery()->getResult();

        return Utils::filterViewableToUser($securityContext, $threads);
    }

    //FIXME this seems too costly just for the result of numeric convenience
    public function getViewableCountForForums($forums, SecurityContext $securityContext) {
        $count = array();
        foreach ($forums as $forum) {
            $count[] = count($this->getViewableToUser($forum->getId(), $securityContext));
        }

        return $count;
    }

    public function getThreadsForMedia(Media $media)
    {
    	$dql = "SELECT t
	            FROM IMDCTerpTubeBundle:Thread t
	            JOIN t.mediaIncluded m
    			WHERE :mid = m.id";
    	$query = $this->getEntityManager ()->createQuery ( $dql )->setParameter ( 'mid', $media->getId () );
    	return $query->getResult ();
    }
}
