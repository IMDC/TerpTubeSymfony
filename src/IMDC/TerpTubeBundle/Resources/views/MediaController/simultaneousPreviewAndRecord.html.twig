{% extends "IMDCTerpTubeBundle:Default:index.html.twig" %}
{% trans_default_domain 'IMDCTerpTubeBundle' %}
{% block title %}My Files{% endblock title %}

{% block nav_ul_authenticated_my_files %}<li class="active">{% endblock %}

{% block stylesheets %}
    {{  parent() }}
    <link href="{{ asset('bundles/imdcterptube/css/simultaneousPreviewRecord.css') }}" rel="stylesheet" />
{% endblock stylesheets %}

{% block herounit %}
<h1>{{ 'filesGateway.title'|trans }}</h1>
{% endblock herounit %}

{% block underherounitrow1 %}
    <div class="row-fluid">
	    <div class="simultaneousVideoRecording row-fluid">
		    <div id="videoContainer">
			    <div id="pipwrap" class="pipstyle" >
			   		<video	class="preview" id="{{ mediaFile.getID }}" preload="auto">
						<source src="{{ asset(mediaFile.getResource.getWebPathWebm) }}"/>
						<source src="{{ asset(mediaFile.getResource.getWebPath) }}"/>
					</video>
					<i class="xclosepip fa fa-times-circle fa-large" ></i>
				</div>
				<div id="sourcewrap" class="sourcestyle">
					<video	class="preview"  id="record" preload="auto" autoplay muted>
					</video>
					<i class="xclosepip fa fa-times-circle fa-large" style="display:none;"></i>
				</div>
			</div>
			<div class="simultaneousVideoControls">
			</div>
		</div>
    </div>

{% endblock underherounitrow1 %}

{% block underherounitrow2 %}

{% endblock underherounitrow2 %}

{% block javascripts %}
 {{ parent() }}
 <script type='text/javascript'>
 var compoundMediaID = -1;
 $(document).ready(function() {
	 var player1Element = $("#{{ mediaFile.getID }}");
	 var player2Element = $("#record");
	 var player1 = new Player(player1Element);
	 var player2 = new Player(player2Element);

	 var startTime = 0; //used to hold the start time of the recording relative to the source video
	 var recordedMediaID = -1;
	 
	 
	 player1.options.areaSelectionEnabled = false;
	 player1.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
	 player1.options.backButton = false;
	 player1.options.forwardButton = false;
	 player1.options.audioBar = false;
	 player1.options.controlBarElement = $('.simultaneousVideoControls');
	 player1.options.controlBarVisible = true;

	 
	 player2.options.areaSelectionEnabled = false;
	 player2.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
	 player2.options.type = Player.DENSITY_BAR_TYPE_RECORDER;
	 player2.options.backButton = false;
	 player2.options.forwardButton = true;
	 player2.options.audioBar = false;
	 player2.options.volumeControl = false;
	 player2.options.recordingErrorFunction = function(e)
	 {
		 console.log('Reeeejected!', e);
	 };
	 player2.options.recordingSuccessFunction = function(data)
	 {
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.recordingSuccessFunction];
		// fn(data);
		 console.log('Success!', data);
	 };
	 player2.options.forwardFunction = function(data)
	 {
		 player2.destroyRecorder();
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.forwardFunction]||null;
		// fn(data);
		 console.log('Forward!', data);
		 goForward();
	 };
	
	 player2.options.controlBarElement = $('.simultaneousVideoControls');

	 player2.createControls();
	 player1.createControls();
	 

	 
	 player2Element.parents(".ui-dialog").on("dialogbeforeclose", function(event, ui) 
		 {
		 if (player !=null)
		 	player.destroyRecorder();
		 });

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player1).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });

	 $(player1).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player Initialized");
			//player2.options.maxRecordingTime = player1.getDuration();
			//player2.repaint();
		 });
	 
	 $(player2).on(Player.EVENT_RECORDING_STARTED, function() {
			player1.setControlsEnabled(false);
			startTime = player1.getCurrentTime();
			player2.options.additionalDataToPost = {'startTime' : startTime, 'sourceMediaID' : '{{ mediaFile.getID }}'};
			player2.options.recordingPostURL = Routing.generate('imdc_files_gateway_add_simultaneous_recording', player2.options.additionalDataToPost);
			player1.play();
			console.log("Recording Started");
			if (recordedMediaID != -1)
			{
				//TODO AJAX to Delete the recording
				var mediaManager = new MediaManager();
				$(mediaManager).on(MediaManager.EVENT_DELETE_SUCCESS, function(){
					console.log("Temporary media deleted");
					});
				$(mediaManager).on(MediaManager.EVENT_DELETE_ERROR, function(event, response){
					console.log("Error deleting media");
					console.log(response);
					});
				mediaManager.deleteMedia(recordedMediaID);
				recordedMediaID = -1;
			}
		 });

	 $(player2).on(Player.EVENT_RECORDING_STOPPED, function() {
			player1.pause();
			player1.setControlsEnabled(true);
			console.log("Recording Finished");
		 });

	 $(player2).on(Player.EVENT_RECORDING_UPLOADED, function(event, data) {
			console.log("Recording Uploaded");
			compoundMediaID = data.compoundMedia.id;
			recordedMediaID = data.compoundMedia.sourceMedia.id;
			console.log(data);
		 });

	 $(player1).on(Player.EVENT_INITIALIZED, function() {
			console.log("Recorder Initialized");
		 });

	 var hidePIPButton = $('<button id="hidePIP">Hide PIP</button>');
     var swapPIPButton = $('<button id="swapPIP">Swap PIP</button>');
     
     var player1VideoControlsElement = $(player1.elementID).find('.videoControls').eq(0);

     hidePIPButton.on("click", function(event){ hidePIP("div.pipstyle");});

     swapPIPButton.on("click", function(event){swapPIP("div#pipwrap", "div#sourcewrap", swapPIPButton);});
     $('.xclosepip').on("click", function(event){
    	 hidePIPButton.click();
     });

	 hidePIPButton.appendTo(player1VideoControlsElement);
	 swapPIPButton.appendTo(player1VideoControlsElement);

     $("div#pipwrap").draggable({containment: "#videoContainer"});

     // set draggable and disabled on the source wrap 
     $("div#sourcewrap").draggable({disabled: true, containment: "#videoContainer"});
		
});

 function goForward()
 {
	 window.location = Routing.generate('imdc_files_gateway_preview_compound_media', {compoundMediaId: compoundMediaID});
 }
  </script>
  
  <script src="{{ asset('bundles/imdcterptube/js/myFiles.js') }}"></script>
{% endblock javascripts %}