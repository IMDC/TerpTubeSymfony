{% extends "IMDCTerpTubeBundle:Default:index.html.twig" %}
{% trans_default_domain 'IMDCTerpTubeBundle' %}
{% block title %}My Files{% endblock title %}

{% block nav_ul_authenticated_my_files %}<li class="active">{% endblock %}

{% block stylesheets %}
    {{  parent() }}
    <link href="{{ asset('bundles/imdcterptube/css/simultaneousPreviewRecord.css') }}" rel="stylesheet" />
{% endblock stylesheets %}

{% block herounit %}
<h1>{{ 'filesGateway.title'|trans }}</h1>
{% endblock herounit %}

{% block underherounitrow1 %}
    <div class="row-fluid">
	    <div class="simultaneousVideoRecording">
	   		<video	class="preview" id="{{ compoundMedia.getSourceID.getId }}" preload="auto">
				<source src="{{ asset(compoundMedia.getSourceID.getResource.getWebPathWebm) }}"/>
				<source src="{{ asset(compoundMedia.getSourceID.getResource.getWebPath) }}"/>
			</video>
			
			<video	class="preview"  id="{{ compoundMedia.getTargetID.getId }}" preload="auto" preload="auto" >
				<source src="{{ asset(compoundMedia.getTargetID.getResource.getWebPathWebm) }}"/>
				<source src="{{ asset(compoundMedia.getTargetID.getResource.getWebPath) }}"/>
			</video>
			
			<div class="simultaneousVideoControls">
			</div>
		</div>
    </div>

{% endblock underherounitrow1 %}

{% block underherounitrow2 %}

{% endblock underherounitrow2 %}

{% block javascripts %}
 {{ parent() }}
 <script type='text/javascript'>
 $(document).ready(function() {
	 var player1Element = $("#{{ compoundMedia.getSourceID.getID }}");
	 var player2Element = $("#{{ compoundMedia.getTargetID.getID }}");
	 var player1 = new Player(player1Element);
	 var player2 = new Player(player2Element);

	 var startTime = {{ compoundMedia.getTargetStartTime }}; //used to hold the start time of the recording relative to the source video
	 var totalTime = 0;
	 
	 player1.options.areaSelectionEnabled = false;
	 player1.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
	 player1.options.backButton = false;
	 player1.options.forwardButton = false;
	 player1.options.audioBar = false;
	 //player1.options.controlBarElement = $('.simultaneousVideoControls');
	 player1.options.controlBarVisible = false;

	 
	 player2.options.areaSelectionEnabled = false;
	 player2.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
	 player2.options.backButton = false;
	 //player.options.forwardButton = false;
	 player2.options.audioBar = false;
	 player2.options.volumeControl = true;

	 player2.options.recordingErrorFunction = function(e)
	 {
		 console.log('Reeeejected!', e);
	 };
	 player2.options.recordingSuccessFunction = function(data)
	 {
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.recordingSuccessFunction];
		// fn(data);
		 console.log('Success!', data);
	 };
	 player2.options.forwardFunction = function(data)
	 {
		 player.destroyRecorder();
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.forwardFunction]||null;
		// fn(data);
		 console.log('Forward!', data);
	 };
	 //player2.options.controlBarElement = $('.simultaneousVideoControls');


	 player1.createControls();
	 player2.createControls();

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player2.playing)
			{
				player2.setVideoTime(player1.getCurrentTime()+startTime);
			}
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player1).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			player2.setVideoTime(seekTime+startTime);
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });
	 $(player1).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player Initialized");
			//player2.options.maxRecordingTime = player1.getDuration();
			//player2.repaint();
		 });

	 $(player2).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player1.playing)
			{
				player1.setVideoTime(player1.getCurrentTime()-startTime);
				player1.play();
			}
		 });

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player2.playing)
			{
				player2.setVideoTime(player1.getCurrentTime());
			}
		 });
	 $(player2).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
			player1.pause();
		 });
	 $(player2).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player2).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			player1.setVideoTime(seekTime-startTime);
			if (player2.playing)
				player1.play();
			else
				player1.pause();
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });
	 $(player2).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player2 Initialized");
			totalTime = player2.getDuration()+startTime;
		 });
     console.log($(player1.elementID).find('.volumeControl').eq(0));
     var sourceVolumeControl = $('<div class="sourceVolumeControl"></div>');
     sourceVolumeControl.append('<p>Source Volume</p>');
     $(player1.elementID).find('.volumeControl').eq(0).detach().appendTo(sourceVolumeControl);
	sourceVolumeControl.appendTo($(player2.elementID).find('.videoControls').eq(0));
		
});
  </script>
  
  <script src="{{ asset('bundles/imdcterptube/js/myFiles.js') }}"></script>
{% endblock javascripts %}