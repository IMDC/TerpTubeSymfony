{% extends "IMDCTerpTubeBundle:Default:index.html.twig" %}
{% trans_default_domain 'IMDCTerpTubeBundle' %}
{% block title %}My Files{% endblock title %}

{% block nav_ul_authenticated_my_files %}<li class="active">{% endblock %}

{% block stylesheets %}
    {{  parent() }}
    <link href="{{ asset('bundles/imdcterptube/css/simultaneousPreviewRecord.css') }}" rel="stylesheet" />
{% endblock stylesheets %}

{% block herounit %}
<h1>{{ 'filesGateway.title'|trans }}</h1>
{% endblock herounit %}

{% block underherounitrow1 %}
    <div class="row-fluid">
    	
	    <div class="simultaneousVideoRecording">
	    	<div id="videoContainer">
		    	<div id="pipwrap" class="pipstyle" >
			   		<video	class="preview" id="{{ compoundMedia.getSourceID.getId }}" preload="auto" >
						<source src="{{ asset(compoundMedia.getSourceID.getResource.getWebPathWebm) }}"/>
						<source src="{{ asset(compoundMedia.getSourceID.getResource.getWebPath) }}"/>
					</video>
					<i class="xclosepip icon-remove-sign icon-large" ></i>
					
				</div>
				<div id="sourcewrap" class="sourcestyle">
					<video	class="preview"  id="{{ compoundMedia.getTargetID.getId }}" preload="auto">
						<source src="{{ asset(compoundMedia.getTargetID.getResource.getWebPathWebm) }}"/>
						<source src="{{ asset(compoundMedia.getTargetID.getResource.getWebPath) }}"/>
					</video>
					<i class="xclosepip icon-remove-sign icon-large" style="display:none;"></i>
					
				</div>
			</div>
			<div class="simultaneousVideoControls">
			</div>
		</div>
    </div>

{% endblock underherounitrow1 %}

{% block underherounitrow2 %}

{% endblock underherounitrow2 %}

{% block javascripts %}
 {{ parent() }}
 <script type='text/javascript'>
 $(document).ready(function() {
	 var player1Element = $("#{{ compoundMedia.getSourceID.getID }}");
	 var player2Element = $("#{{ compoundMedia.getTargetID.getID }}");
	 var player1 = new Player(player1Element);
	 var player2 = new Player(player2Element);

	 var startTime = {{ compoundMedia.getTargetStartTime }}; //used to hold the start time of the recording relative to the source video
	 var totalTime = 0;
	 
	 player1.options.areaSelectionEnabled = false;
	 player1.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
	 player1.options.backButton = false;
	 player1.options.forwardButton = false;
	 player1.options.audioBar = false;
	 //player1.options.controlBarElement = $('.simultaneousVideoControls');
	 player1.options.controlBarVisible = false;

	 
	 player2.options.areaSelectionEnabled = false;
	 player2.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
	 player2.options.backButton = false;
	 //player.options.forwardButton = false;
	 player2.options.audioBar = false;
	 player2.options.volumeControl = true;
	 player2.options.controlBarElement = $('.simultaneousVideoControls');

	 player2.options.recordingErrorFunction = function(e)
	 {
		 console.log('Reeeejected!', e);
	 };
	 player2.options.recordingSuccessFunction = function(data)
	 {
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.recordingSuccessFunction];
		// fn(data);
		 console.log('Success!', data);
	 };
	 player2.options.forwardFunction = function(data)
	 {
		 player.destroyRecorder();
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.forwardFunction]||null;
		// fn(data);
		 console.log('Forward!', data);
	 };
	 //player2.options.controlBarElement = $('.simultaneousVideoControls');

	 player1.createControls();
	 player2.createControls();

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player2.playing)
			{
				player2.setVideoTime(player1.getCurrentTime()+startTime);
			}
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player1).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			player2.setVideoTime(seekTime+startTime);
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });
	 $(player1).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player Initialized");
			//player2.options.maxRecordingTime = player1.getDuration();
			//player2.repaint();
		 });

	 $(player2).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player1.playing)
			{
				player1.setVideoTime(player1.getCurrentTime()-startTime);
				player1.play();
			}
		 });

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player2.playing)
			{
				player2.setVideoTime(player1.getCurrentTime());
			}
		 });
	 $(player2).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
			player1.pause();
		 });
	 $(player2).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player2).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			player1.setVideoTime(seekTime-startTime);
			if (player2.playing)
				player1.play();
			else
				player1.pause();
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });
	 $(player2).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player2 Initialized");
			totalTime = player2.getDuration()+startTime;
		 });
     console.log($(player1.elementID).find('.volumeControl').eq(0));

     var player2VideoControlsElement = $(player2.elementID).find('.videoControls').eq(0)
     var sourceVolumeControl = $('<div class="sourceVolumeControl"></div>');

     var hidePIPButton = $('<button id="hidePIP">Hide PIP</button>');
     var swapPIPButton = $('<button id="swapPIP">Swap PIP</button>');

     hidePIPButton.on("click", function(event){
   		var clip = $("div.pipstyle");
    	  
 		if (this.value == "show") 
 		{
    		clip.show();
    	 	var selectedAudio = $("input[type='radio']:checked").prop('value');
    	    if ( (selectedAudio == "both") || (selectedAudio == "clip1") ) 
    	    {
    	    	clip[0].volume = 1;
    	   	}
    	    $(this).prop('value', 'hide').html("Hide PiP");
   		}           
    	else 
    	{
    		clip.hide();
    	    $(this).prop('value', 'show').html("Show PiP");
    	}
    			
   	 });

     swapPIPButton.on("click", function(event){
    	 var clip1 = $("div#pipwrap");
         var clip2 = $("div#sourcewrap");
         
         var piprole;
         var sourcerole;

         if ( (clip1.draggable("option", "disabled"))) 
         {
            // clip 1 is acting as the source
            piprole    = clip2;
            sourcerole = clip1;
         }
         else {
            piprole    = clip1;
            sourcerole = clip2;
         }

         // get position, size, z-index of pip 
         var piproleheight   = piprole.height();
         var piprolewidth    = piprole.width();
         var piprolezindex   = piprole.css("z-index");
         var piproleposition = piprole.position(); // returns object accessible with var.left or var.top
         var piprolepositionleft = piprole.css("left"); // need these explicit css calls as .position
         var piprolepositiontop  = piprole.css("top");  // doesn't return correct values if elements are hidden
         var piprolevisible = piprole.is(":visible");
         
         // get position, size, z-index of source 
         var sourceroleheight   = sourcerole.height();
         var sourcerolewidth    = sourcerole.width();
         var sourcerolezindex   = sourcerole.css("z-index");
         var sourceroleposition = sourcerole.position(); // returns object accessible with var.left or var.top
         var sourcerolepositionleft = sourcerole.css("left");
         var sourcerolepositiontop  = sourcerole.css("top");
         
         // disable draggable and resizeable on pip
         piprole.draggable("option", "disabled", true);
         
         // switch css classes
         piprole.removeClass("pipstyle");
         piprole.addClass("sourcestyle");
         
         sourcerole.removeClass("sourcestyle");
         sourcerole.addClass("pipstyle");

         /**************** PIP now acting as SOURCE from here *********/
         /**************** PIP now acting as SOURCE from here *********/

         // swap positions
         // get position of container div element
         var vidcontainer = $("div#videoContainer");
         var vidcontainerpos = vidcontainer.offset();
         var vidcontainerpadding = vidcontainer.css("padding");

         var vcont = parseInt(vidcontainerpos.top,10) + parseInt(vidcontainerpadding,10);
         var vconl = parseInt(vidcontainerpos.left,10) + parseInt(vidcontainerpadding,10);
         
         // copy old pip's size and position attributes to 'new' pip
         // check if pip is hidden
         if (!piprolevisible) {
            // previous PIP video was hidden before swap started
            sourcerole.show();
            piprole.show();

            // reset show/hide pip button
            hidePIPButton.prop('value', 'hide').html("Hide PIP");
         }
         // fix for absolute position as resizable messes it up
         /*sourcerole.css({"height" : piproleheight, "width" : piprolewidth, "position" : "absolute",
                         "left" : piprolepositionleft, "top" : piprolepositiontop});

         // reset acting source movie dimensions, fix for absolute position
         piprole.css({ "position" : "absolute", "left" : vconl,
                       "top" : vcont});
         */

         sourcerole.css({"left" : piprolepositionleft, "top" : piprolepositiontop});

		// reset acting source movie dimensions, fix for absolute position
		piprole.css({ "left" : 0,"top" : 0});
           
         // make sourcerole (now acting as pip) draggable and resizeable
         sourcerole.draggable("option", "disabled", false);

         // reveal close button element on new pip
         sourcerole.find('i').show();

         // hide close button element on old pip
         piprole.find('i').hide(); 
      
     });
     
     sourceVolumeControl.append('<div>Source Volume</div>');
     $(player1.elementID).find('.volumeControl').eq(0).detach().appendTo(sourceVolumeControl);

	 sourceVolumeControl.appendTo(player2VideoControlsElement);
	 hidePIPButton.appendTo(player2VideoControlsElement);
	 swapPIPButton.appendTo(player2VideoControlsElement);

     $("div#pipwrap").draggable({containment: "#videoContainer"});

     // set draggable and disabled on the source wrap 
     $("div#sourcewrap").draggable({disabled: true, containment: "#videoContainer"});
 
	
		
});
  </script>
  
{% endblock javascripts %}