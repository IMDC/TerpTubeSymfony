{% extends "IMDCTerpTubeBundle:Default:index.html.twig" %}
{% trans_default_domain 'IMDCTerpTubeBundle' %}
{% block title %}{{ 'interpretationsGateway.title'|trans }}{% endblock title %}

{% block nav_ul_authenticated_my_interpretations %}<li class="active">{% endblock %}

{% block stylesheets %}
    {{  parent() }}
    <link href="{{ asset('bundles/imdcterptube/css/compoundMediaPreview.css') }}" rel="stylesheet" />
{% endblock stylesheets %}

{% block herounit %}
<h1>{{ 'interpretationsGateway.title'|trans }}</h1>
{% endblock herounit %}

{% block underherounitrow1 %}
    <div class="row-fluid">
    	
	    <div class="preview-visual">
	    	<div id="videoContainer">
		    	<div id="pipwrap" class="pipstyle" >
			   		<video	class="preview" id="{{ compoundMedia.getSource.getId }}" preload="auto" >
						<source src="{{ asset(compoundMedia.getSource.getResource.getWebPathWebm) }}"/>
						<source src="{{ asset(compoundMedia.getSource.getResource.getWebPath) }}"/>
					</video>
					<i class="xclosepip fa fa-times-circle fa-large" ></i>
					
				</div>
				<div id="sourcewrap" class="sourcestyle">
					<video	class="preview"  id="{{ compoundMedia.getTarget.getId }}" preload="auto">
						<source src="{{ asset(compoundMedia.getTarget.getResource.getWebPathWebm) }}"/>
						<source src="{{ asset(compoundMedia.getTarget.getResource.getWebPath) }}"/>
					</video>
					<i class="xclosepip fa fa-times-circle fa-large" style="display:none;"></i>
					
				</div>
			</div>
			<div class="preview-controls">
			</div>
		</div>
    </div>

{% endblock underherounitrow1 %}

{% block underherounitrow2 %}

{% endblock underherounitrow2 %}

{% block javascripts %}
 {{ parent() }}
 <script src="{{ asset('bundles/imdcterptube/js/myFiles.js') }}"></script>
 <script type='text/javascript'>
 $(document).ready(function() {
	 var player2Element = $("#{{ compoundMedia.getSource.getID }}");
	 var player1Element = $("#{{ compoundMedia.getTarget.getID }}");
	 var player1 = new Player(player1Element);
	 var player2 = new Player(player2Element);

	 var startTime = {{ compoundMedia.getTargetStartTime }}; //used to hold the start time of the recording relative to the source video
	 var totalTime = 0;
	 
	 player1.options.areaSelectionEnabled = false;
	 player1.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
// 	 player1.options.backButtons = false;
// 	 player1.options.forwardButtons = false;
	 player1.options.audioBar = false;
	 //player1.options.controlBarElement = $('.simultaneousVideoControls');
	 player1.options.controlBarVisible = true;
	 player1.options.controlBarElement = $('.preview-controls');
	 player1.options.volumeControl = true;
	 
	 player2.options.areaSelectionEnabled = false;
	 player2.options.updateTimeType = Player.DENSITY_BAR_UPDATE_TYPE_ABSOLUTE;
// 	 player2.options.backButtons = false;
	 //player.options.forwardButtons = false;
	 player2.options.audioBar = false;
// 	 player2.options.volumeControl = true;
	 
	 player2.options.controlBarVisible = false;

	 player2.options.recordingErrorFunction = function(e)
	 {
		 console.log('Reeeejected!', e);
	 };
	 player2.options.recordingSuccessFunction = function(data)
	 {
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.recordingSuccessFunction];
		// fn(data);
		 console.log('Success!', data);
	 };
	 player1.options.forwardButtons.push('<button class="forwardButton"></button>');
	 player1.options.forwardFunctions.push(function(data)
	 {
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.forwardFunction]||null;
		// fn(data);
		 console.log('Forward!', data);
	 });
	 player1.options.forwardButtons.push('<button class="cutButton"></button>');
	 player1.options.forwardFunctions.push(function(data)
	 {
		// console.log(recorderConfiguration);
		// var fn = window[recorderConfiguration.forwardFunction]||null;
		// fn(data);
		 console.log('Cut!', data);
	 });
	 //player2.options.controlBarElement = $('.simultaneousVideoControls');

	 player1.createControls();
	 player2.createControls();

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player2.playing)
			{
				player2.setVideoTime(player1.getCurrentTime()+startTime);
			}
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
		 });
	 $(player1).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player1).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			player2.setVideoTime(seekTime+startTime);
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });
	 $(player1).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player Initialized");
			//player2.options.maxRecordingTime = player1.getDuration();
			//player2.repaint();
		 });

	 $(player2).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player1.playing)
			{
				player1.setVideoTime(player1.getCurrentTime()-startTime);
				player1.play();
			}
		 });

	 $(player1).on(Player.EVENT_PLAYBACK_STARTED, function() {
			console.log("Playback Started");
			if (!player2.playing)
			{
				player2.setVideoTime(player1.getCurrentTime());
			}
		 });
	 $(player2).on(Player.EVENT_PLAYBACK_STOPPED, function() {
			console.log("Playback Stopped");
			player1.pause();
		 });
	 $(player2).on(Player.EVENT_PLAYBACK_FINISHED, function() {
			console.log("Playback Finished");
		 });
	 $(player2).on(Player.EVENT_SEEK, function(event, seekTime) {
			console.log("Playback Seeked to:"+seekTime);
			player1.setVideoTime(seekTime-startTime);
			if (player2.playing)
				player1.play();
			else
				player1.pause();
			//player2.options.maxRecordingTime = player1.getDuration()-seekTime;
			//player2.repaint();
		 });
	 $(player2).on(Player.EVENT_INITIALIZED, function() {
			console.log("Player2 Initialized");
			totalTime = player2.getDuration()+startTime;
		 });
     console.log($(player1.elementID).find('.volumeControl').eq(0));

     var player1VideoControlsElement = $(player1.elementID).find('.videoControls').eq(0);
     var sourceVolumeControl = $('<div class="sourceVolumeControl"></div>');

     var hidePIPButton = $('<button id="hidePIP">Hide PIP</button>');
     var swapPIPButton = $('<button id="swapPIP">Swap PIP</button>');

     hidePIPButton.on("click", function(event){ hidePIP("div.pipstyle");});

     swapPIPButton.on("click", function(event){swapPIP("div#pipwrap", "div#sourcewrap", swapPIPButton);});
     $('.xclosepip').on("click", function(event){
    	 hidePIPButton.click();
     });
     
     
     sourceVolumeControl.append('<div>Source Volume</div>');
     $(player2.elementID).find('.volumeControl').eq(0).detach().appendTo(sourceVolumeControl);

	 sourceVolumeControl.appendTo(player1VideoControlsElement);
	 hidePIPButton.appendTo(player1VideoControlsElement);
	 swapPIPButton.appendTo(player1VideoControlsElement);

     $("div#pipwrap").draggable({containment: "#videoContainer"});

     // set draggable and disabled on the source wrap 
     $("div#sourcewrap").draggable({disabled: true, containment: "#videoContainer"});
 
	
		
});
  </script>
  
{% endblock javascripts %}